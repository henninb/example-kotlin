//import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
    id 'java-library'
    id 'jacoco'
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.github.ben-manes.versions" version "${gradleVersionsPlugin}"
}

apply from: 'test.gradle'

repositories {
    mavenCentral()
    jcenter()
    google()
    flatDir {
        dirs 'libs'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    //Groovy
    implementation("org.codehaus.groovy:groovy-all:${groovyVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    //implementation("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
//    implementation("org.springframework.shell:spring-shell-starter:2.0.1.RELEASE")

    //postgres
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")

    //json parser
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")

    //hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
