//import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
    id 'scala'
    id 'java-library'
    id 'jacoco'
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.github.ben-manes.versions" version "${gradleVersionsPlugin}"
}

apply from: 'test.gradle'

repositories {
    mavenCentral()
    jcenter()
    google()
    flatDir {
        dirs 'libs'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
    // kotlinOptions.jvmTarget = '1.8'
}

sourceSets {
    main.scala.srcDirs += 'src/main/scala'
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    //Groovy
    implementation("org.codehaus.groovy:groovy-all:${groovyVersion}")

    //Scala
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
//    implementation("org.springframework.shell:spring-shell-starter:2.0.1.RELEASE")

    //Camel
    // implementation("org.apache.camel:camel-spring-boot-starter:${apacheCamelVersion}")
    //implementation("org.apache.camel:camel-spring-boot:${apacheCamelVersion}")
    implementation("org.apache.camel.springboot:camel-spring-boot-dependencies:${apacheCamelVersion}")
    implementation("org.apache.camel:camel-core:${apacheCamelVersion}")


    //excel
    implementation("org.apache.poi:poi:${poiVersion}")
    implementation("org.apache.poi:poi-ooxml:${poiVersion}")

    //postgres
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")

    //json parser
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")

    //hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
}


//Properties localBootRunProperties() {
//    Properties properties = new Properties()
//    properties.load(
//            new FileInputStream(file(project.projectDir).absolutePath + "/application-local.yml"))
//    return properties
//}

//bootRun {
//    group = 'Application'
//    doFirst() {
//        main = bootJar.mainClassName
//        //bootRun.systemProperties = localBootRunProperties() as Map<String, String>
//    }
//}

//task bootRunLocal(type: BootRun, dependsOn: 'build') {
//    group = 'Application'
//    doFirst() {
//        main = bootJar.mainClassName
//        classpath = sourceSets.main.runtimeClasspath
//        environment 'SPRING_PROFILES_ACTIVE', 'local'
//        environment 'LOGS', 'logs'
//    }
//}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
